"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dev = void 0;
const utils_1 = require("../utils");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const components_1 = require("../_preview/components");
const utils_2 = require("../_preview/utils");
const root_1 = require("../_preview/root");
const pages_1 = require("../_preview/pages");
const cpy_1 = __importDefault(require("cpy"));
const detect_package_manager_1 = require("detect-package-manager");
const log_symbols_1 = __importDefault(require("log-symbols"));
const ora_1 = __importDefault(require("ora"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const shelljs_1 = __importDefault(require("shelljs"));
const styles_1 = require("../_preview/styles");
const dev = async () => {
    try {
        const hasReactEmailDirectory = (0, utils_1.checkDirectoryExist)(utils_1.REACT_EMAIL_ROOT);
        let packageManager;
        try {
            packageManager = await (0, detect_package_manager_1.detect)({ cwd: utils_1.CURRENT_PATH });
        }
        catch (_) {
            packageManager = 'yarn';
        }
        if (hasReactEmailDirectory) {
            const isUpToDate = await (0, utils_1.checkPackageIsUpToDate)();
            if (isUpToDate) {
                await Promise.all([generateEmailsPreview(), syncPkg()]);
                await installDependencies(packageManager);
                shelljs_1.default.exec(`${packageManager} run dev`, { async: true });
                (0, utils_1.watcher)();
                return;
            }
            await fs_1.default.promises.rm(utils_1.REACT_EMAIL_ROOT, { recursive: true });
        }
        await createBasicStructure();
        await createAppDirectories();
        await createAppFiles();
        await Promise.all([generateEmailsPreview(), syncPkg()]);
        await installDependencies(packageManager);
        shelljs_1.default.exec(`${packageManager} run dev`, { async: true });
        (0, utils_1.watcher)();
    }
    catch (error) {
        await utils_1.watcherInstance.close();
        shelljs_1.default.exit(1);
    }
};
exports.dev = dev;
const createBasicStructure = async () => {
    try {
        // Create `.react-email` directory
        await (0, utils_1.createDirectory)(utils_1.REACT_EMAIL_ROOT);
        // Create `src` and `public` directories
        await Promise.all([
            (0, utils_1.createDirectory)(utils_1.SRC_PATH),
            (0, utils_1.createDirectory)(utils_1.PUBLIC_PATH),
        ]);
    }
    catch (error) {
        throw new Error('Error creating the basic structure');
    }
};
const createAppDirectories = async () => {
    try {
        await Promise.all([
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'components')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'utils')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'pages')),
            (0, utils_1.createDirectory)(path_1.default.join(utils_1.SRC_PATH, 'styles')),
        ]);
    }
    catch (error) {
        throw new Error('Error creating app directories');
    }
};
const createAppFiles = async () => {
    try {
        const creation = (appFiles, name) => {
            return appFiles.map((file) => {
                const location = name
                    ? `${utils_1.SRC_PATH}/${name}/${file.title}`
                    : `${utils_1.REACT_EMAIL_ROOT}/${file.title}`;
                return fs_1.default.promises.writeFile(location, file.content);
            });
        };
        const pageCreation = pages_1.pages.map(async (page) => {
            const location = page.dir
                ? `${utils_1.SRC_PATH}/pages/${page.dir}/${page.title}`
                : `${utils_1.SRC_PATH}/pages/${page.title}`;
            if (page.dir) {
                await (0, utils_1.createDirectory)(`${utils_1.SRC_PATH}/pages/${page.dir}`);
            }
            return fs_1.default.promises.writeFile(location, page.content);
        });
        await Promise.all([
            ...creation(utils_2.utils, 'utils'),
            ...creation(components_1.components, 'components'),
            ...creation(styles_1.styles, 'styles'),
            ...creation(root_1.root),
            ...pageCreation,
        ]);
    }
    catch (error) {
        throw new Error('Error creating app files');
    }
};
const generateEmailsPreview = async () => {
    try {
        const spinner = (0, ora_1.default)('Generating emails preview').start();
        await createEmailPreviews();
        await createStatisFiles();
        await createComponents();
        spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'Emails preview generated',
        });
    }
    catch (error) {
        console.log({ error });
    }
};
const createEmailPreviews = async () => {
    const hasEmailsDirectory = (0, utils_1.checkDirectoryExist)(utils_1.CLIENT_EMAILS_PATH);
    const isEmailsDirectoryEmpty = hasEmailsDirectory
        ? await (0, utils_1.checkEmptyDirectory)(utils_1.CLIENT_EMAILS_PATH)
        : true;
    if (isEmailsDirectoryEmpty) {
    }
    const hasPackageEmailsDirectory = (0, utils_1.checkDirectoryExist)(utils_1.PACKAGE_EMAILS_PATH);
    if (hasPackageEmailsDirectory) {
        await fs_1.default.promises.rm(utils_1.PACKAGE_EMAILS_PATH, { recursive: true });
    }
    await (0, cpy_1.default)(`${utils_1.CLIENT_EMAILS_PATH}/*{.tsx,.jsx}`, utils_1.PACKAGE_EMAILS_PATH);
};
const createStatisFiles = async () => {
    const hasPackageStaticDirectory = (0, utils_1.checkDirectoryExist)(`${utils_1.REACT_EMAIL_ROOT}/public/static`);
    const hasStaticDirectory = (0, utils_1.checkDirectoryExist)(`${utils_1.CLIENT_EMAILS_PATH}/static`);
    if (hasPackageStaticDirectory) {
        await fs_1.default.promises.rm(`${utils_1.REACT_EMAIL_ROOT}/public/static`, {
            recursive: true,
        });
    }
    if (hasStaticDirectory) {
        await (0, cpy_1.default)(`${utils_1.CLIENT_EMAILS_PATH}/static`, `${utils_1.REACT_EMAIL_ROOT}/public/static`);
    }
};
const createComponents = async () => {
    const hasPackageComponentsDirectory = (0, utils_1.checkDirectoryExist)(`${utils_1.PACKAGE_EMAILS_PATH}/components`);
    const hasComponentsDirectory = (0, utils_1.checkDirectoryExist)(`${utils_1.CLIENT_EMAILS_PATH}/components`);
    if (hasPackageComponentsDirectory) {
        await fs_1.default.promises.rm(`${utils_1.PACKAGE_EMAILS_PATH}/components`, {
            recursive: true,
        });
    }
    if (hasComponentsDirectory) {
        await (0, cpy_1.default)(`${utils_1.CLIENT_EMAILS_PATH}/components`, `${utils_1.PACKAGE_EMAILS_PATH}/components`);
    }
};
const syncPkg = async () => {
    const previewPkg = (0, utils_1.getPreviewPkg)();
    const clientPkg = await (0, read_pkg_1.default)();
    const pkg = {
        ...previewPkg,
        dependencies: {
            ...previewPkg.dependencies,
            ...clientPkg.dependencies,
        },
    };
    await fs_1.default.promises.writeFile(path_1.default.join(utils_1.REACT_EMAIL_ROOT, 'package.json'), JSON.stringify(pkg));
};
const installDependencies = async (packageManager) => {
    const spinner = (0, ora_1.default)('Installing dependencies...\n').start();
    shelljs_1.default.cd(path_1.default.join(utils_1.REACT_EMAIL_ROOT));
    shelljs_1.default.exec(`${packageManager} install`);
    spinner.stopAndPersist({
        symbol: log_symbols_1.default.success,
        text: 'Dependencies installed',
    });
};
